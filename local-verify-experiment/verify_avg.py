from web3 import Web3
import json
import csv

# connect to ganache
ganache_url = "http://127.0.0.1:8545"  # adjust this url if using different local node
web3 = Web3(Web3.HTTPProvider(ganache_url))
assert web3.is_connected(), "failed to connect to ganache"

# use ganache accounts
accounts = web3.eth.accounts

# abi and bytecode, replace these with correct contract details
# load the abi from json file
with open("abi.json", "r") as abi_file:
    contract_abi = json.load(abi_file)

# contract bytecode copied from remix
contract_bytecode = "608060405234801561001057600080fd5b50604051610a19380380610a1983398101604081905261002f91610097565b6000811161008f5760405162461bcd60e51b8152602060048201526024808201527f546f74616c20636c69656e7473206d75737420626520677265617465722074686044820152630616e20360e41b606482015260840160405180910390fd5b6002556100b0565b6000602082840312156100a957600080fd5b5051919050565b61095a806100bf6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630e08b0e31461006757806322d2b440146100835780633e85283e1461009857806361eed2a9146100a15780637c9b2e5f146100c5578063f1987e11146100ce575b600080fd5b61007060025481565b6040519081526020015b60405180910390f35b610096610091366004610656565b6100f9565b005b61007060045481565b6100b46100af366004610730565b61028a565b60405161007a9594939291906107ad565b61007060035481565b6100e16100dc3660046107e6565b61034a565b6040516001600160a01b03909116815260200161007a565b3360009081526020819052604090206003015460ff16156101555760405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e481cdd589b5a5d1d1959607a1b60448201526064015b60405180910390fd5b6040805160a0810182528581528415156020808301919091528415158284015260608201849052600160808301523360009081528082529290922081518051929391926101a59284920190610592565b50602082015160018083018054604086015115156101000261ff00199415159490941661ffff199091161792909217909155606083015160028301556080909201516003909101805491151560ff1992909216919091179055805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b031916331790558115610270576004805490600061025383610815565b9190505550806003600082825461026a9190610830565b90915550505b600254600154141561028457610284610374565b50505050565b6000602081905290815260409020805481906102a590610848565b80601f01602080910402602001604051908101604052809291908181526020018280546102d190610848565b801561031e5780601f106102f35761010080835404028352916020019161031e565b820191906000526020600020905b81548152906001019060200180831161030157829003601f168201915b50505060018401546002850154600390950154939460ff80831695610100909304811694509092501685565b6001818154811061035a57600080fd5b6000918252602090912001546001600160a01b0316905081565b600254600154146103c75760405162461bcd60e51b815260206004820152601960248201527f4e6f7420616c6c20636c69656e7473207375626d697474656400000000000000604482015260640161014c565b600280546103d59190610883565b6004541180156103e757506000600454115b156105905760006004546003546103fe9190610883565b9050600060025467ffffffffffffffff81111561041d5761041d61062b565b60405190808252806020026020018201604052801561045057816020015b606081526020019060019003908161043b5790505b50905060005b6001548110156105535760008060018381548110610476576104766108a5565b60009182526020808320909101546001600160a01b03168352820192909252604001902080546104a590610848565b80601f01602080910402602001604051908101604052809291908181526020018280546104d190610848565b801561051e5780601f106104f35761010080835404028352916020019161051e565b820191906000526020600020905b81548152906001019060200180831161050157829003601f168201915b5050505050828281518110610535576105356108a5565b6020026020010181905250808061054b90610815565b915050610456565b507fb1941ad6df16acf16e81a3341e2f9860b0eb3b0702755d1b30578dbeaed921fa81836040516105859291906108bb565b60405180910390a150505b565b82805461059e90610848565b90600052602060002090601f0160209004810192826105c05760008555610606565b82601f106105d957805160ff1916838001178555610606565b82800160010185558215610606579182015b828111156106065782518255916020019190600101906105eb565b50610612929150610616565b5090565b5b808211156106125760008155600101610617565b634e487b7160e01b600052604160045260246000fd5b8035801515811461065157600080fd5b919050565b6000806000806080858703121561066c57600080fd5b843567ffffffffffffffff8082111561068457600080fd5b818701915087601f83011261069857600080fd5b8135818111156106aa576106aa61062b565b604051601f8201601f19908116603f011681019083821181831017156106d2576106d261062b565b816040528281528a60208487010111156106eb57600080fd5b82602086016020830137600060208483010152809850505050505061071260208601610641565b925061072060408601610641565b9396929550929360600135925050565b60006020828403121561074257600080fd5b81356001600160a01b038116811461075957600080fd5b9392505050565b6000815180845260005b818110156107865760208185018101518683018201520161076a565b81811115610798576000602083870101525b50601f01601f19169290920160200192915050565b60a0815260006107c060a0830188610760565b951515602083015250921515604084015260608301919091521515608090910152919050565b6000602082840312156107f857600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610829576108296107ff565b5060010190565b60008219821115610843576108436107ff565b500190565b600181811c9082168061085c57607f821691505b6020821081141561087d57634e487b7160e01b600052602260045260246000fd5b50919050565b6000826108a057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b8381101561091257605f19888703018552610900868351610760565b955093820193908201906001016108e4565b5050949094019490945294935050505056fea26469706673582212202ba039bd5dd8e4356a1bfec3a4249d942a8e7093f668c7b2718d1e049c5b3b0a64736f6c634300080c0033"

# deploy contract
def deploy_contract(total_clients):
    # deploy the contract with initial value total_clients
    Contract = web3.eth.contract(abi=contract_abi, bytecode=contract_bytecode)
    tx_hash = Contract.constructor(total_clients).transact({"from": accounts[0]})
    tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
    return web3.eth.contract(address=tx_receipt.contractAddress, abi=contract_abi)

# simulate client submissions
def simulate_clients(contract, N):
    # simulate submissions for N clients
    total_gas_used = 0
    for i in range(N):
        client_account = accounts[i]  # each client uses diff account
        signature = f"Client-{i}"  # client name
        cluster_verification = True
        model_verification = True
        model_quality_score = 100  # example score
        # submit data
        tx = contract.functions.submitData(
            signature, cluster_verification, model_verification, model_quality_score
        ).transact({"from": client_account})
        tx_receipt = web3.eth.wait_for_transaction_receipt(tx)
        total_gas_used += tx_receipt["gasUsed"]
    return total_gas_used

# main experiment function
def run_experiment():
    results = {}
    for N in [5, 10, 20, 30, 40, 50]:  # test different client numbers
        print(f"running experiment for N = {N}")
        contract = deploy_contract(N)
        gas_cost = simulate_clients(contract, N)
        results[N] = gas_cost
        print(f"gas used for N = {N}: {gas_cost}")
    return results

# save results to csv
def save_results_to_csv(results, filename="results.csv"):
    # write results to csv file
    with open(filename, mode="w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(["Clients", "GasUsed"])  # header
        for clients, gas in results.items():
            writer.writerow([clients, gas])
    print(f"results saved to {filename}")

if __name__ == "__main__":
    # run experiment and save results
    results = run_experiment()
    save_results_to_csv(results)
    print("final gas costs:", results)
