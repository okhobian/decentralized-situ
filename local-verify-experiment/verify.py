from web3 import Web3
import json
import csv

# connect to ganache
ganache_url = "http://127.0.0.1:8545"  # adjust this url if using different local node
web3 = Web3(Web3.HTTPProvider(ganache_url))
assert web3.is_connected(), "failed to connect to ganache"

# use ganache accounts
accounts = web3.eth.accounts

# abi and bytecode, replace these with correct contract details
# load the abi from json file
with open("abi.json", "r") as abi_file:
    contract_abi = json.load(abi_file)

# contract bytecode copied from remix
contract_bytecode = "608060405234801561001057600080fd5b50604051610ae2380380610ae283398101604081905261002f91610091565b600182116100835760405162461bcd60e51b815260206004820152601760248201527f6e656564206d6f7265207468616e203120636c69656e74000000000000000000604482015260640160405180910390fd5b6002919091556004556100b5565b600080604083850312156100a457600080fd5b505080516020909101519092909150565b610a1e806100c46000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630a8ffe45146100675780630e08b0e31461009757806342cde4e8146100ae57806361eed2a9146100b75780639d961e83146100d9578063f1987e11146100ee575b600080fd5b60035461007a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a060025481565b60405190815260200161008e565b6100a060045481565b6100ca6100c5366004610721565b610101565b60405161008e9392919061079e565b6100ec6100e73660046107de565b6101af565b005b61007a6100fc366004610893565b61032a565b60006020819052908152604090208054819061011c906108ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610148906108ac565b80156101955780601f1061016a57610100808354040283529160200191610195565b820191906000526020600020905b81548152906001019060200180831161017857829003601f168201915b50505050600183015460029093015491929160ff16905083565b3360009081526020819052604090206002015460ff161561020b5760405162461bcd60e51b8152602060048201526011602482015270185b1c9958591e481cdd589b5a5d1d1959607a1b60448201526064015b60405180910390fd5b600254600154106102555760405162461bcd60e51b8152602060048201526014602482015273616c6c207375626d697373696f6e7320646f6e6560601b6044820152606401610202565b60015461026f57600380546001600160a01b031916331790555b6040805160608101825283815260208082018490526001828401523360009081528082529290922081518051929391926102ac9284920190610688565b5060208201516001808301919091556040909201516002918201805491151560ff199092169190911790558154808301835560008390527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b03191633179055549054141561032657610326610354565b5050565b6001818154811061033a57600080fd5b6000918252602090912001546001600160a01b0316905081565b600254600154146103a05760405162461bcd60e51b81526020600482015260166024820152751b9bdd08195d995c9e5bdb99481cdd589b5a5d1d195960521b6044820152606401610202565b6003546001600160a01b0316600090815260208190526040812060019081015491905b60015481101561045e576000806000600184815481106103e5576103e56108e7565b60009182526020808320909101546001600160a01b0316835282019290925260400190206001015460045490915061041d9085610913565b81101580156104385750600454610434908561092a565b8111155b1561044b578261044781610942565b9350505b508061045681610942565b9150506103c3565b50600260016002546104709190610913565b61047a919061095d565b81111561061357600060025467ffffffffffffffff81111561049e5761049e6107c8565b6040519080825280602002602001820160405280156104d157816020015b60608152602001906001900390816104bc5790505b50905060005b6001548110156105d457600080600183815481106104f7576104f76108e7565b60009182526020808320909101546001600160a01b0316835282019290925260400190208054610526906108ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610552906108ac565b801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b50505050508282815181106105b6576105b66108e7565b602002602001018190525080806105cc90610942565b9150506104d7565b507fb1941ad6df16acf16e81a3341e2f9860b0eb3b0702755d1b30578dbeaed921fa818460405161060692919061097f565b60405180910390a1505050565b7f8e21091fbff1b481f4a0383146b43469a9f1bfc97275d232206e61929bf9541a60405161067c9060208082526021908201527f6e6f7420656e6f7567682061677265656d656e74206f6e207468652073636f726040820152606560f81b606082015260800190565b60405180910390a15050565b828054610694906108ac565b90600052602060002090601f0160209004810192826106b657600085556106fc565b82601f106106cf57805160ff19168380011785556106fc565b828001600101855582156106fc579182015b828111156106fc5782518255916020019190600101906106e1565b5061070892915061070c565b5090565b5b80821115610708576000815560010161070d565b60006020828403121561073357600080fd5b81356001600160a01b038116811461074a57600080fd5b9392505050565b6000815180845260005b818110156107775760208185018101518683018201520161075b565b81811115610789576000602083870101525b50601f01601f19169290920160200192915050565b6060815260006107b16060830186610751565b602083019490945250901515604090910152919050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156107f157600080fd5b823567ffffffffffffffff8082111561080957600080fd5b818501915085601f83011261081d57600080fd5b81358181111561082f5761082f6107c8565b604051601f8201601f19908116603f01168101908382118183101715610857576108576107c8565b8160405282815288602084870101111561087057600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b6000602082840312156108a557600080fd5b5035919050565b600181811c908216806108c057607f821691505b602082108114156108e157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015610925576109256108fd565b500390565b6000821982111561093d5761093d6108fd565b500190565b6000600019821415610956576109566108fd565b5060010190565b60008261097a57634e487b7160e01b600052601260045260246000fd5b500490565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b838110156109d657605f198887030185526109c4868351610751565b955093820193908201906001016109a8565b5050949094019490945294935050505056fea264697066735822122066aad0cf0fe03bd69ba0c452cd3d2307df5c39d0fee62bdde2d4fbb0baa7384d64736f6c634300080c0033"

# deploy contract
def deploy_contract(total_clients, delta):
    # deploy the contract with initial values
    Contract = web3.eth.contract(abi=contract_abi, bytecode=contract_bytecode)
    tx_hash = Contract.constructor(total_clients, delta).transact({"from": accounts[0]})
    tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
    return web3.eth.contract(address=tx_receipt.contractAddress, abi=contract_abi)

# simulate client submissions
def simulate_clients(contract, N, delta):
    total_gas_used = 0
    first_client_score = 100  # example first client's score
    delta_min = first_client_score - delta
    delta_max = first_client_score + delta

    # first client submits data
    client_account = accounts[0]
    signature = f"Client-0"
    tx = contract.functions.submitData(signature, first_client_score).transact({"from": client_account})
    tx_receipt = web3.eth.wait_for_transaction_receipt(tx)
    total_gas_used += tx_receipt["gasUsed"]

    # simulate N-1 other clients
    for i in range(1, N):
        client_account = accounts[i]
        signature = f"Client-{i}"
        # ensure scores are within the delta range for this simulation
        model_quality_score = (delta_min + delta_max) // 2
        tx = contract.functions.submitData(signature, model_quality_score).transact({"from": client_account})
        tx_receipt = web3.eth.wait_for_transaction_receipt(tx)
        total_gas_used += tx_receipt["gasUsed"]

    return total_gas_used

# main experiment function
def run_experiment(delta=10):
    results = {}
    for N in [5, 10, 20, 30, 40, 50]:  # test different client numbers
        print(f"running experiment for N = {N}")
        contract = deploy_contract(N, delta)
        gas_cost = simulate_clients(contract, N, delta)
        results[N] = gas_cost
        print(f"gas used for N = {N}: {gas_cost}")
    return results

# save results to csv
def save_results_to_csv(results, filename="results.csv"):
    # write results to csv file
    with open(filename, mode="w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(["Clients", "GasUsed"])  # header
        for clients, gas in results.items():
            writer.writerow([clients, gas])
    print(f"results saved to {filename}")

if __name__ == "__main__":
    # run experiment and save results
    results = run_experiment()
    save_results_to_csv(results)
    print("final gas costs:", results)