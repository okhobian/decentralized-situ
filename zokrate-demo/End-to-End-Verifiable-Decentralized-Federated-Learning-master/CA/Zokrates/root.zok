import "hashes/sha256/embed/512bitPadded" as sha256;
import "utils/pack/bool/unpack256" as unpack256;
import "utils/casts/bool_array_to_u32_array" as bool_to_u32;
from "ecc/babyjubjubParams" import BabyJubJubParams;
import "signatures/verifyEddsa.code" as verifyEddsa;
import "ecc/babyjubjubParams.code" as context;

def main(private field[2] PubKey_Device, private field[2] R, private field S, field[2] A, u32[8] M0, u32[8] M1) -> u32[8]{
    //Verify Signature (R,S) with PupKey (A) on Hash (M0, M1)
	BabyJubJubParams context = context();	
    bool isVerified = verifyEddsa(R, S, A, M0, M1, context);

    bool[256] pubX = unpack256(PubKey_Device[0]);
    bool[256] pubY = unpack256(PubKey_Device[1]);
	bool[256] hash_bool = sha256(pubX, pubY);
	u32[8] hash = bool_to_u32(hash_bool);

    bool hashcheck = hash == M0;
    log("isVerified: {}", isVerified);
    log("hashcheck: {}", hashcheck);
    assert(isVerified && hashcheck);

    return hash;
}